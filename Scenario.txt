William Basquez MW 3:00 - 4:20PM

Suppose we have 2 processes with 10 instructions and 10% CPU use. We have 2 non-interactive processes, 10 instructions, 90% CPU. 
Find a combination of flags that will minimize the total time required for these 4 processes.
Command to be modified: "./process-run.py -l 10:10,10:10,10:90,10:90"

By running the command by itself, it takes 68 time units for the 4 processes to be completed, but by setting the "-L", "-S SWITCH_ON_IO" and "-I IO_RUN_IMMEDIATE" flags, the time goes down by more than half to 42 time units, with CPU and IO at a little more than 95% each.

The command that I used was: "./process-run.py -l 10:10,10:10,10:90,10:90 -L 4 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE"

The reason I chose the -L flag is because it helps determine how long IOs take to complete, in this case, the amount that yield the better results is 4, instead of the default 5 time units.
This is the case in which we want IO instructions to run as fast as possible, without making the IO run at 0%. We want both IO and CPU to run as close to 100% to take advantage of all resources.
The use of the IO_RUN_IMMEDIATE will force the system to change processes right after the individual process finishes executing an IO instruction, rather than finish for each IO instruction to finish to then switch to a different process.
Lastly, using the SWITCH_ON_IO flag will make the system to switch processes right after an individual process executes an IO instruction, rather than switch processes after a running process is completely finished.

In summary, using each flag by itself improves the total time units it takes a series of processes to complete, but combining these three together resources are used better, and the system works in an optimized way.
